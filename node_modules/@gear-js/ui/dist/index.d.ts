/// <reference types="react" />
import * as react from 'react';
import { FunctionComponent, SVGProps, ReactNode, ButtonHTMLAttributes, InputHTMLAttributes, SelectHTMLAttributes, OptionHTMLAttributes, TextareaHTMLAttributes, CSSProperties } from 'react';
export { default as buttonStyles } from './components/Button/Button.module.scss';
export { default as checkboxStyles } from './components/Checkbox/Checkbox.module.scss';
export { default as inputStyles } from './components/Input/Input.module.scss';
export { default as radioStyles } from './components/Radio/Radio.module.scss';
export { default as selectStyles } from './components/Select/Select.module.scss';
export { default as textareaStyles } from './components/Textarea/Textarea.module.scss';
export { default as modalStyles } from './components/Modal/Modal.module.scss';
export { default as fileInputStyles } from './components/FileInput/FileInput.module.scss';
export { default as alertStyles } from './components/Alert/Alert.module.scss';
export { default as TooltipStyles } from './components/Tooltip/Tooltip.module.scss';
export { default as inputWrapperStyles } from './components/utils/InputWrapper/InputWrapper.module.scss';
export { default as TooltipWrapperStyles } from './components/utils/TooltipWrapper/TooltipWrapper.module.scss';

declare type Gap = `${number}/${number}`;
declare type BaseInputProps = {
    size?: 'normal' | 'large';
    color?: 'light' | 'dark';
    error?: ReactNode;
    tooltip?: string;
    block?: boolean;
};
declare type XDirectionProps = BaseInputProps & {
    label?: string;
    direction?: 'x';
    gap?: Gap;
};
declare type YDirectionProps = BaseInputProps & {
    label?: string;
    direction?: 'y';
    gap?: never;
};
declare type InputProps = XDirectionProps | YDirectionProps;
declare type SVGComponent = FunctionComponent<SVGProps<SVGSVGElement>>;

interface BaseProps extends ButtonHTMLAttributes<HTMLButtonElement> {
    text?: string;
    icon?: SVGComponent;
    color?: 'primary' | 'secondary' | 'light' | 'lightGreen' | 'gradient' | 'transparent';
    size?: 'large' | 'medium' | 'small';
    block?: boolean;
    noWrap?: boolean;
    tooltip?: string;
    noLetterSpacing?: boolean;
}
interface TextProps extends BaseProps {
    text: string;
}
interface IconProps extends BaseProps {
    icon: SVGComponent;
}
declare type Props$c = TextProps | IconProps;

declare const Button: react.ForwardRefExoticComponent<Props$c & react.RefAttributes<HTMLButtonElement>>;

interface Props$b extends InputHTMLAttributes<HTMLInputElement> {
    label: string;
    type?: 'switch';
}
declare const Checkbox: react.ForwardRefExoticComponent<Props$b & react.RefAttributes<HTMLInputElement>>;

declare type Props$a = Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> & InputProps & {
    icon?: SVGComponent;
};
declare const Input: react.ForwardRefExoticComponent<Props$a & react.RefAttributes<HTMLInputElement>>;

interface Props$9 extends InputHTMLAttributes<HTMLInputElement> {
    label: string;
}
declare const Radio: react.ForwardRefExoticComponent<Props$9 & react.RefAttributes<HTMLInputElement>>;

interface Props$8 extends InputHTMLAttributes<HTMLInputElement> {
    buttons: Props$9[];
}
declare const RadioGroup: ({ buttons, value, ...attrs }: Props$8) => JSX.Element;

declare type Props$7 = Omit<SelectHTMLAttributes<HTMLSelectElement>, 'size'> & InputProps & {
    options: OptionHTMLAttributes<HTMLOptionElement>[];
};
declare const Select: react.ForwardRefExoticComponent<Props$7 & react.RefAttributes<HTMLSelectElement>>;

declare type Props$6 = TextareaHTMLAttributes<HTMLTextAreaElement> & InputProps;
declare const Textarea: react.ForwardRefExoticComponent<Props$6 & react.RefAttributes<HTMLTextAreaElement>>;

declare type Props$5 = {
    heading: string;
    close: () => void;
    children?: ReactNode;
    className?: string;
    size?: 'normal' | 'large';
};
declare const Modal: ({ heading, close, children, className, size }: Props$5) => react.ReactPortal | null;

declare type Props$4 = Omit<InputHTMLAttributes<HTMLInputElement>, 'size' | 'value' | 'onChange' | 'accept'> & Omit<InputProps, 'color'> & {
    value?: File | undefined;
    label?: string;
    error?: string;
    color?: Props$c['color'];
    accept?: string | string[];
    onChange?: (value: File | undefined) => void;
};
declare const FileInput: react.ForwardRefExoticComponent<Omit<InputHTMLAttributes<HTMLInputElement>, "size" | "value" | "onChange" | "accept"> & Omit<InputProps, "color"> & {
    value?: File | undefined;
    label?: string | undefined;
    error?: string | undefined;
    color?: Props$c['color'];
    accept?: string | string[] | undefined;
    onChange?: ((value: File | undefined) => void) | undefined;
} & react.RefAttributes<HTMLInputElement>>;

declare type Options = {
    type: 'info' | 'error' | 'loading' | 'success';
    style?: CSSProperties;
    title?: string;
    timeout?: number;
    isClosed?: boolean;
};
declare type Alert$1 = {
    id: string;
    content: ReactNode;
    options: Options;
};
declare type Props$3 = {
    alert: Alert$1;
    close: () => void;
};

declare function Alert({ alert, close }: Props$3): JSX.Element;

declare type Props$2 = {
    text: string;
    className?: string;
};
declare function Tooltip({ text, className }: Props$2): JSX.Element;

declare type Props$1 = {
    id: string;
    direction: string;
    size: string;
    children: ReactNode;
    className?: string;
    label?: string;
    error?: ReactNode;
    gap?: Gap;
    disabled?: boolean;
    tooltip?: string;
};
declare const InputWrapper: (props: Props$1) => JSX.Element;

declare type Props = {
    text: string;
    children: ReactNode;
    className?: string;
};
declare const TooltipWrapper: ({ text, children, className }: Props) => JSX.Element;

export { Alert, Props$3 as AlertProps, Button, Props$c as ButtonProps, Checkbox, Props$b as CheckboxProps, FileInput, Props$4 as FileInputProps, Input, Props$a as InputProps, InputWrapper, Props$1 as InputWrapperProps, Modal, Props$5 as ModalProps, Radio, RadioGroup, Props$8 as RadioGroupProps, Props$9 as RadioProps, Select, Props$7 as SelectProps, Textarea, Props$6 as TextareaProps, Tooltip, Props$2 as TooltipProps, TooltipWrapper, Props as TooltipWrapperProps };
